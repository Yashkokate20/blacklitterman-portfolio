name: Black-Litterman Portfolio CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort coverage pytest-cov
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check src/ tests/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only src/ tests/
    
    - name: Run unit tests with coverage
      run: |
        coverage run -m pytest tests/ -v
        coverage report -m
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  notebook-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nbconvert
    
    - name: Test Jupyter notebook execution
      run: |
        jupyter nbconvert --to notebook --execute --inplace black_litterman_notebook.ipynb
    
    - name: Validate notebook outputs
      run: |
        python -c "
        import nbformat
        nb = nbformat.read('black_litterman_notebook.ipynb', as_version=4)
        
        # Check that notebook executed successfully
        executed_cells = sum(1 for cell in nb.cells if cell.cell_type == 'code' and cell.execution_count)
        print(f'Executed {executed_cells} code cells')
        
        # Check for errors
        error_cells = [cell for cell in nb.cells if cell.cell_type == 'code' and any(output.output_type == 'error' for output in cell.outputs)]
        if error_cells:
            print(f'Found {len(error_cells)} cells with errors')
            exit(1)
        else:
            print('✅ All notebook cells executed successfully')
        "

  streamlit-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test Streamlit app import
      run: |
        python -c "
        import sys
        sys.path.append('src')
        
        # Test that all modules can be imported
        from black_litterman import BlackLittermanModel
        from portfolio_optimization import PortfolioOptimizer
        from utils import load_market_data
        from config import config
        
        print('✅ All modules imported successfully')
        
        # Test basic functionality
        import numpy as np
        import pandas as pd
        
        # Create synthetic data
        tickers = ['AAPL', 'MSFT', 'GOOGL']
        returns = pd.DataFrame(np.random.randn(100, 3) * 0.02, columns=tickers)
        market_caps = pd.Series([1000, 800, 600], index=tickers)
        
        # Test Black-Litterman model
        bl_model = BlackLittermanModel(returns, market_caps)
        print('✅ Black-Litterman model created successfully')
        
        # Test optimization
        optimizer = PortfolioOptimizer(returns.mean() * 252, returns.cov() * 252)
        weights = optimizer.optimize_unconstrained(risk_aversion=3.0)
        print('✅ Portfolio optimization completed successfully')
        "
    
    - name: Validate Streamlit app syntax
      run: |
        python -c "
        import ast
        
        with open('streamlit_app.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        try:
            ast.parse(content)
            print('✅ Streamlit app syntax is valid')
        except SyntaxError as e:
            print(f'❌ Syntax error in Streamlit app: {e}')
            exit(1)
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Run safety check for vulnerabilities
      run: |
        safety check --json || echo "Safety check completed with warnings"
    
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || echo "Bandit scan completed"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler
    
    - name: Run performance benchmarks
      run: |
        python -c "
        import sys
        sys.path.append('src')
        import time
        import numpy as np
        import pandas as pd
        from black_litterman import BlackLittermanModel
        from portfolio_optimization import PortfolioOptimizer
        
        # Performance test with different portfolio sizes
        sizes = [5, 10, 20]
        
        for size in sizes:
            print(f'Testing portfolio size: {size} assets')
            
            # Generate test data
            tickers = [f'ASSET_{i:02d}' for i in range(size)]
            returns = pd.DataFrame(np.random.randn(252, size) * 0.02, columns=tickers)
            market_caps = pd.Series(np.random.lognormal(10, 1, size), index=tickers)
            
            # Time Black-Litterman computation
            start_time = time.time()
            bl_model = BlackLittermanModel(returns, market_caps)
            
            # Set a simple view
            P = np.zeros((1, size))
            P[0, 0] = 1
            P[0, 1] = -1
            Q = np.array([0.05])
            bl_model.set_views(P, Q)
            
            bl_returns, bl_cov = bl_model.compute_posterior()
            bl_time = time.time() - start_time
            
            # Time portfolio optimization
            start_time = time.time()
            optimizer = PortfolioOptimizer(bl_returns * 252, bl_cov * 252)
            weights, info = optimizer.optimize_constrained(
                constraints={'long_only': True, 'max_weight': 0.4},
                risk_aversion=3.0
            )
            opt_time = time.time() - start_time
            
            print(f'  BL computation: {bl_time:.3f}s')
            print(f'  Optimization: {opt_time:.3f}s')
            print(f'  Total: {bl_time + opt_time:.3f}s')
            
            # Performance thresholds
            assert bl_time < 2.0, f'BL computation too slow: {bl_time:.3f}s'
            assert opt_time < 5.0, f'Optimization too slow: {opt_time:.3f}s'
        
        print('✅ All performance tests passed')
        "

  deploy-test:
    runs-on: ubuntu-latest
    needs: [test, notebook-test, streamlit-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test deployment readiness
      run: |
        # Check that all required files exist
        required_files=(
          "streamlit_app.py"
          "requirements.txt"
          "README.md"
          "src/black_litterman.py"
          "src/portfolio_optimization.py"
          "src/backtesting.py"
          "src/utils.py"
          "config.py"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done
        
        echo "✅ All required files present"
        
        # Test that the main components work together
        python test_implementation.py
        
        echo "✅ Deployment readiness test passed"
    
    - name: Generate deployment artifacts
      run: |
        # Create a simple deployment summary
        echo "# Deployment Summary" > deployment-summary.md
        echo "Generated on: $(date)" >> deployment-summary.md
        echo "Commit: ${{ github.sha }}" >> deployment-summary.md
        echo "Python packages:" >> deployment-summary.md
        pip list >> deployment-summary.md
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifacts
        path: |
          deployment-summary.md
          requirements.txt
          streamlit_app.py
